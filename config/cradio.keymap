/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };

        combo_z {
            bindings = <&kp Z>;
            key-positions = <10 21>;
        };

        combo_lctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <21 22>;
        };

        combo_rctrl {
            bindings = <&kp RCTRL>;
            key-positions = <27 28>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q   &kp W   &kp F   &kp P                   &kp B      &kp J   &kp L      &kp U    &kp Y     &kp BACKSPACE
  &kp A   &kp R   &kp S   &kp T                   &kp G      &kp M   &kp N      &kp E    &kp I             &kp O
  &none   &kp X   &kp C   &kp D                   &kp V      &kp K   &kp H  &kp COMMA  &kp DOT  &mt LSHIFT ENTER
                          &mo 1  &mt LEFT_COMMAND SPACE  &kp SPACE   &mo 2
            >;
        };

        left_layer {
            bindings = <
   &kp NUMBER_1  &kp NUMBER_2    &kp NUMBER_3     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0
      &kp GRAVE         &none   &kp RG(LS(Z))        &kp LG(Z)         &none     &kp MINUS     &kp EQUAL      &kp LBKT      &kp RBKT  &kp BACKSLASH
 &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW         &none  &kp QUESTION      &kp SEMI      &kp APOS     &kp SLASH      &kp RSHFT
                                                         &mo 1     &kp LCTRL      &kp RGUI         &mo 3
            >;
        };

        right_layer {
            bindings = <
  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PERCENT     &kp CARET  &kp AMPS  &kp STAR  &kp LPAR   &kp RPAR
 &kp TILDE   &none    &trans    &trans        &none     &kp UNDER  &kp PLUS  &kp LBRC  &kp RBRC   &kp PIPE
     &none   &none     &none     &none        &none  &kp QUESTION  &kp LEFT  &kp DOWN    &kp UP  &kp RIGHT
                                 &mo 3     &kp LCTL       &kp SPC     &mo 2
            >;
        };

        tri_layer {
            bindings = <
 &kp NUM_1   &kp NUM_2   &kp NUM_3  &kp NUM_4  &kp NUM_5  &trans     &trans        &trans      &trans  &trans
    &kp F1      &kp F2      &kp F3     &kp F4     &kp F5  &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
     &none  &bt BT_NXT  &bt BT_PRV     &kp F6     &kp F7  &trans  &kp PG_DN  &kp K_VOL_DN      &trans  &trans
                                       &trans     &trans  &trans     &trans
            >;
        };
    };
};
